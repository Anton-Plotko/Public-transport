@page
@using Public_transport.Models
@model Public_transport.Pages.TransportModel
@{
    int counter = 0;
    int TrolleybusIndex = 0;
    int BusIndex = 0;
    int nameIndex = 0;
    int dayofweek = (int)DateTime.Now.DayOfWeek;
    List<PublicTransport> NAME = new List<PublicTransport>();
    List<string> TIMEt = new List<string>();
    List<string> TIMEb = new List<string>();
    foreach(PublicTransport name in Model.ResName)
    {
        NAME.Add(name);
    }
}

<div class="Text">
    <h1>Остановка: @Model.Name</h1>
    <h1>Ближайшие маршруты</h1>
        <h2>Троллейбусы</h2>
    @foreach (RelationshipBetweenTransportsAndStops Time in Model.ResId)
        {
        @if (NAME[TrolleybusIndex].Type == "T")
            {
                if(dayofweek==6||dayofweek==0)
                {
                    string[] TimeSaSu = Time.TimeSaSu.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                    try
                    {
                        var transportTimes = TimeSaSu
                        .Select(x => DateTime.Parse(x))
                        .ToList();

                        var now = DateTime.Now.TimeOfDay;

                        var closestTime = (from x in transportTimes
                                            where x.TimeOfDay > now
                                            orderby x.TimeOfDay ascending
                                            select x).First();
                        string time = closestTime.ToString("HH:mm");
                        TIMEt.Add(time);
                    }
                    catch
                    {
                        TIMEt.Add(TimeSaSu.First());
                    }
                }
                else
                {
                    string[] TimeMonFri = Time.TimeMonFri.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                    try
                    {
                        var transportTimes = TimeMonFri
                        .Select(x => DateTime.Parse(x))
                        .ToList();

                        var now = DateTime.Now.TimeOfDay;

                        var closestTime = (from x in transportTimes
                                            where x.TimeOfDay > now
                                            orderby x.TimeOfDay ascending
                                            select x).First();
                        string time = closestTime.ToString("HH:mm");
                        TIMEt.Add(time);
                    }
                    catch
                    {   
                        TIMEt.Add(TimeMonFri.First()); 
                    }
                }
            TrolleybusIndex++;
            }

        if (TrolleybusIndex == 0)
            {
                <a>На данной остановке маршрутов нет</a>
                break;
            }
            
        }
        @{
            Dictionary<string, string> keysT = new Dictionary<string, string>();
            for (var i = 0; i < TIMEt.Count; i++)
            {
                keysT.Add(NAME[nameIndex].Name, TIMEt[i]);
                nameIndex++;
            }
            foreach(var item in keysT.OrderBy(x=>x.Value))
            {
                string[] NameArray = item.Key.Split(new string[] { "  " }, StringSplitOptions.RemoveEmptyEntries);
                <h3><span style="font-size: 150%;text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;">@NameArray.First()</span> @NameArray.Last() (@item.Value)</h3>
            }
        }
        <h2>Автобусы</h2>
    @foreach (RelationshipBetweenTransportsAndStops Time in Model.ResId)
        {
        @if (NAME[BusIndex].Type == "A")
            {
                if (dayofweek==6||dayofweek==0)
                {
                    string[] TimeSaSu = Time.TimeSaSu.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                    try
                    {
                        var transportTimes = TimeSaSu
                        .Select(x => DateTime.Parse(x))
                        .ToList();

                        var now = DateTime.Now.TimeOfDay;

                        var closestTime = (from x in transportTimes
                                           where x.TimeOfDay > now
                                           orderby x.TimeOfDay ascending
                                           select x).First();
                        string time = closestTime.ToString("HH:mm");
                        TIMEb.Add(time);
                    }
                    catch
                    {
                        TIMEb.Add(TimeSaSu.First());
                    }
                }
                else
                {
                    string[] TimeMonFri = Time.TimeMonFri.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                    try
                    {
                        var transportTimes = TimeMonFri
                        .Select(x => DateTime.Parse(x))
                        .ToList();

                        var now = DateTime.Now.TimeOfDay;

                        var closestTime = (from x in transportTimes
                                           where x.TimeOfDay > now
                                           orderby x.TimeOfDay ascending
                                           select x).First();
                        string time = closestTime.ToString("HH:mm");
                        TIMEb.Add(time);
                    }
                    catch
                    {
                        TIMEb.Add(TimeMonFri.First());
                    }
                }
            }
        BusIndex++;
            
        }
        @{
            Dictionary<string, string> keysA = new Dictionary<string, string>();
            for (var i = 0; i < TIMEb.Count; i++)
            {
                keysA.Add(NAME[nameIndex].Name, TIMEb[i]);
                nameIndex++;
            }
            foreach(var item in keysA.OrderBy(x=>x.Value))
            {
                string[] NameArray = item.Key.Split(new string[] { "  " }, StringSplitOptions.RemoveEmptyEntries);
                <h3><span style="font-size: 150%;text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;">@NameArray.First()</span> @NameArray.Last() (@item.Value)</h3>
            }
        }
</div>
<div class="Text">
    <details>
    <summary>Все маршруты</summary>
    <h2>Троллейбусы</h2>
    <ul style="list-style: none;"> 
    @foreach (PublicTransport Name in Model.ResName)
    {
        if (Name.Type == "T")
        {
            string[] NameArray = Name.Name.Split(new string[] { "  " }, StringSplitOptions.RemoveEmptyEntries);
            <li><a class="gradient-button" href="/Time?IdStops=@Model.ID&IdTransport=@Name.Id&NameTransport=@Name.Name&NameStop=@Model.Name&TypeTransport=@Name.Type"><span style="font-size: 200%;text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;">@NameArray.First()</span> @NameArray.Last()</a></li>
            ++counter;
        }

        if (counter==0)
        {
            <li>На данной остановке маршрутов нет</li>
            break;
        }            
    }
    </ul>
    <h2>Автобусы</h2>
    <ul style="list-style: none;">
        @foreach (PublicTransport Name in Model.ResName)
        {
            if (Name.Type == "A")
            {
                string[] NameArray = Name.Name.Split(new string[] { "  " }, StringSplitOptions.RemoveEmptyEntries);
                <li><a class="gradient-button" href="/Time?IdStops=@Model.ID&IdTransport=@Name.Id&NameTransport=@Name.Name&NameStop=@Model.Name&TypeTransport=@Name.Type"><span style="font-size: 200%;text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;">@NameArray.First()</span> @NameArray.Last()</a></li>
            }

        }
    </ul>
    </details>
</div>
@section TransportStyle {
    <link rel="stylesheet" href="~/css/TransportStyle.css" />
}